name: Deploy Medusa to AWS ECS
on:
  push:
    branches: [ main ]
    paths-ignore:
      - '.github/workflows/**'
      - '**/*.md'
      - 'README*'
env:
  AWS_REGION: us-west-1
  ECR_REPOSITORY: medusa-backend
jobs:
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      
    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build Docker image
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
        
        # Push to ECR
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        # Set output for use in next step
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
        
    - name: Download Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.4.6
        
    - name: Terraform Init
      working-directory: ./terraform
      run: terraform init
      
    - name: Terraform Validate
      working-directory: ./terraform
      run: terraform validate
      
    - name: Terraform Plan
      id: plan
      working-directory: ./terraform
      run: |
        terraform plan \
          -var="ecr_repository_url=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}" \
          -var="db_username=${{ secrets.DB_USERNAME }}" \
          -var="db_password=${{ secrets.DB_PASSWORD }}" \
          -var="cookie_secret=${{ secrets.COOKIE_SECRET }}" \
          -var="jwt_secret=${{ secrets.JWT_SECRET }}" \
          -var="aws_region=${{ env.AWS_REGION }}" \
          -out=tfplan
      continue-on-error: true
      
    - name: Terraform Apply
      id: apply
      if: github.ref == 'refs/heads/main' && steps.plan.outcome == 'success'
      working-directory: ./terraform
      run: |
        terraform apply -auto-approve tfplan
      continue-on-error: true
      
    - name: Cleanup Infrastructure on Failure
      if: steps.apply.outcome == 'failure'
      working-directory: ./terraform
      run: |
        echo "Terraform apply failed. Destroying infrastructure to prevent incomplete deployment."
        terraform destroy -auto-approve \
          -var="ecr_repository_url=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}" \
          -var="db_username=${{ secrets.DB_USERNAME }}" \
          -var="db_password=${{ secrets.DB_PASSWORD }}" \
          -var="cookie_secret=${{ secrets.COOKIE_SECRET }}" \
          -var="jwt_secret=${{ secrets.JWT_SECRET }}" \
          -var="aws_region=${{ env.AWS_REGION }}"
          
    - name: Force ECS service update
      if: github.ref == 'refs/heads/main' && steps.apply.outcome == 'success'
      run: |
        aws ecs update-service --cluster medusa-cluster --service medusa-service --force-new-deployment
        
    - name: Report deployment status
      if: always()
      run: |
        if [ "${{ steps.apply.outcome }}" == "success" ]; then
          echo "Deployment completed successfully!"
        elif [ "${{ steps.apply.outcome }}" == "failure" ]; then
          echo "Deployment failed. Infrastructure has been cleaned up."
          exit 1
        else
          echo "Terraform plan failed. No changes were applied."
          exit 1
        fi